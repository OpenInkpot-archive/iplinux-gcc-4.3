# -*- makefile -*-
# definitions used in more than one Makefile / rules file

include debian/rules.params

SHELL		= /bin/bash -e	# brace expansion used in rules file
PWD		:= $(shell pwd)
srcdir		= $(PWD)/src
builddir	= $(PWD)/build
stampdir	= stamps
distribution	:= IPlinux

# architecture dependent variables
vafilt = $(subst $(2)=,,$(filter $(2)=%,$(1)))

DPKG_VARS		:= $(shell dpkg-architecture)
DEB_BUILD_GNU_TYPE	?= $(call vafilt,$(DPKG_VARS),DEB_BUILD_GNU_TYPE)
DEB_HOST_ARCH		?= $(call vafilt,$(DPKG_VARS),DEB_HOST_ARCH)
DEB_HOST_GNU_CPU	?= $(call vafilt,$(DPKG_VARS),DEB_HOST_GNU_CPU)
DEB_HOST_GNU_SYSTEM	?= $(call vafilt,$(DPKG_VARS),DEB_HOST_GNU_SYSTEM)
DEB_HOST_GNU_TYPE	?= $(call vafilt,$(DPKG_VARS),DEB_HOST_GNU_TYPE)

DEB_TARGET_ARCH = $(GCC_TARGET)

  TARGET_VARS := $(shell dpkg-architecture -f \
			-a$(DEB_TARGET_ARCH) 2>/dev/null)
  DEB_TARGET_ARCH	?= $(call vafilt,$(TARGET_VARS),DEB_HOST_ARCH)
  DEB_TARGET_ARCH_OS	?= $(call vafilt,$(TARGET_VARS),DEB_HOST_ARCH_OS)
  DEB_TARGET_ARCH_CPU	?= $(call vafilt,$(TARGET_VARS),DEB_HOST_ARCH_CPU)
  DEB_TARGET_GNU_CPU	?= $(call vafilt,$(TARGET_VARS),DEB_HOST_GNU_CPU)
  DEB_TARGET_GNU_TYPE	?= $(call vafilt,$(TARGET_VARS),DEB_HOST_GNU_TYPE)
  DEB_TARGET_GNU_SYSTEM	?= $(call vafilt,$(TARGET_VARS),DEB_HOST_GNU_SYSTEM)

# ---------------------------------------------------------------------------
# full canadian
# typical cross-compiler
# reverse cross (built to run on the target)
# native
#
# build != host && host == target : reverse cross (REVERSE_CROSS == yes)
# build == host && host != target : typical cross (DEB_CROSS == yes)
# build != host && host != target : canadian (DEB_CROSS == yes)
# build == host && host == target : native

# ---------------------------------------------------------------------------
# which binary packages are built?

# cross compiler support. If GCC_TARGET is set, then it's the architecture
# we build for.

ifeq ($(DEB_TARGET_ARCH),)
$(error GCC_TARGET value "$(GCC_TARGET)" is not a valid Debian architecture)
endif

  # TP: Target Prefix. Used primarily as a prefix for cross tool
  #     names (e.g. powerpc-linux-gcc).
  # TS: Target Suffix. Used primarily at the end of cross compiler
  #     package names (e.g. gcc-powerpc).
  # LS: Library Suffix. Used primarily at the end of cross compiler
  #     library package names (e.g. libgcc-powerpc-cross).
  DEB_TARGET_ALIAS ?= $(DEB_TARGET_GNU_TYPE)
  TP =  $(subst _,-,$(DEB_TARGET_GNU_TYPE))-
  TS = -$(subst _,-,$(DEB_TARGET_ALIAS))
  LS = -$(subst _,-,$(DEB_TARGET_ARCH))-cross

  TARGET_ALIAS := $(DEB_TARGET_ALIAS)

printarch:
	@echo DEB_TARGET_ARCH: $(DEB_TARGET_ARCH)
	@echo DEB_TARGET_ARCH_OS: $(DEB_TARGET_ARCH_OS)
	@echo DEB_TARGET_ARCH_CPU: $(DEB_TARGET_ARCH_CPU)
	@echo DEB_TARGET_ARCH_CPU: $(DEB_TARGET_ARCH_CPU)
	@echo DEB_TARGET_GNU_SYSTEM: $(DEB_TARGET_GNU_SYSTEM)
	@echo TARGET_ALIAS: $(TARGET_ALIAS)
	@echo TP: $(TP)
	@echo TS: $(TS)

# The name of the source package
CHANGELOG_VARS := $(shell dpkg-parsechangelog | sed -n 's/ /_/g;/^[^_]/s/^\([^:]*\):_\(.*\)/\1=\2/p')
PKGSOURCE := $(call vafilt,$(CHANGELOG_VARS),Source)

ifneq ($(PKGSOURCE),gcc-snapshot)
  versioned_packages := yes
endif

  cross_bin_arch := -$(subst _,-,$(TARGET_ALIAS))
  cross_lib_arch := -$(subst _,-,$(DEB_TARGET_ARCH))-cross

# Don't include docs with GFDL invariant sections --------------------
GFDL_INVARIANT_FREE := yes

# --------------------
# Configuration of components

COMMA = ,
SPACE = $(EMPTY) $(EMPTY)

# lang= overwrites all of nolang=, overwrites all of WITHOUT_LANG

DEB_LANG_OPT	:= $(filter lang=%,$(DEB_BUILD_OPTIONS))
DEB_LANG	:= $(strip $(subst $(COMMA), ,$(patsubst lang=%,%,$(DEB_LANG_OPT))))
DEB_NOLANG_OPT	:= $(filter nolang=%,$(DEB_BUILD_OPTIONS))
DEB_NOLANG	:= $(strip $(subst $(COMMA), ,$(patsubst nolang=%,%,$(DEB_NOLANG_OPT))))
lfilt	= $(strip $(if $(DEB_LANG), \
		$(if $(filter $(1) $(2),$(DEB_LANG)),yes),$(3)))
nlfilt	= $(strip $(if $(DEB_NOLANG), \
		$(if $(filter $(1) $(2),$(DEB_NOLANG)),disabled by $(DEB_NOLANG_OPT),$(3))))
wlfilt	= $(strip $(if $(filter $(1) $(2), $(subst $(COMMA), ,$(WITHOUT_LANG))), \
		disabled by WITHOUT_LANG=$(WITHOUT_LANG),$(3)))
envfilt	= $(strip $(or $(call lfilt,$(1),$(2)),$(call nlfilt,$(1),$(3)),$(call wlfilt,$(1),$(3)),$(4)))

# common things --------------------
# build common packages, where package names don't differ in different
# gcc versions (fixincludes, libgcj-common) ...
with_common_pkgs := yes

# ... and some libraries, which do not change (libgcc1, libmudflap, libssp0).
ifeq ($(DEB_CROSS_BOOTSTRAP),yes)
  with_common_libs := disabled for the bootstrap compiler
else
  with_common_libs := yes
endif

with_gccbase := yes
with_dev := yes

with_source := no
ifneq (,$(findstring gcc-4,$(PKGSOURCE)))
  with_source := yes
endif
with_source := $(call envfilt, source, , , $(with_source))

ifeq ($(PKGSOURCE),gcc-snapshot)
  with_nls := no
else ifeq ($(DEB_CROSS_BOOTSTRAP),yes)
  with_nls := disabled for the bootstrap compiler
else
  with_nls := yes
endif
with_nls := $(call envfilt, nls, , , $(with_nls))

ifneq ($(WITH_BOOTSTRAP),)
  # "yes" is the default and causes a 3-stage bootstrap.
  # "no" means to just build the first stage, and not create the stage1
  # directory.
  # "lean" means a lean 3-stage bootstrap, i.e. delete each stage when no
  # longer needed.
  with_bootstrap=$(WITH_BOOTSTRAP)
endif

# C --------------------
enabled_languages := c
# Build all packages needed for C development
ifeq ($(with_base_only),yes)
  with_cdev := no
else
  ifeq ($(with_dev),yes)
    with_cdev := yes
  else
    with_cdev := no
  endif
endif

# C++ --------------------
ifeq ($(with_base_only),yes)
  with_cxx := no
else ifeq ($(DEB_CROSS_BOOTSTRAP),yes)
  with_cxx := no
else
  with_cxx := yes
endif
no_cxx_cpus := avr
ifneq (, $(filter $(DEB_TARGET_ARCH_CPU),$(no_cxx_cpus)))
  with_cxx := disabled for architecture $(DEB_TARGET_ARCH_CPU)
endif
with_cxx := $(call envfilt, c++, obj-c++ java, , $(with_cxx))

# Build all packages needed for C++ development
ifeq ($(with_cxx)-$(with_dev),yes-yes)
  with_cxxdev := yes
  with_libcxxdbg := yes
else
  with_cxxdev := no
  with_libcxxdbg := no
endif

ifeq ($(with_cxx),yes)
  enabled_languages += c++
endif

ifeq ($(with_common_pkgs)-$(with_cxx),yes-yes)
  with_libcxx := yes
#  ifeq ($(DEB_TARGET_ARCH_CPU),arm)
#    with_libcxx := no
#  endif
else
  with_libcxx := no
endif

# debugging versions of libstdc++
ifeq ($(with_cxxdev),yes)
  with_debug := yes
else
  with_debug := no
endif
debug_no_cpus :=
ifneq (, $(filter $(DEB_TARGET_ARCH_CPU),$(debug_no_cpus)))
    with_debug := disabled for architecure $(DEB_TARGET_ARCH_CPU)
endif
with_debug := $(call envfilt, debug, , , $(with_debug))

with_mudflap := no
with_libmudflap := no

with_ssp := no
with_ssp_default := no
with_libssp := no

with_proto := no

with_fixincl := no

# Shared libgcc --------------------
with_libgcc := yes

ifeq ($(with_common_libs),yes)
  with_shared_libgcc := yes
else
  with_shared_libgcc := no
endif

with_libgmath := no
with_lib32gmath := no

with_gomp := no

with_libnof := no

all_enabled_languages := $(enabled_languages)
languages_without_lang_opt := c++ proto

export debian_extra_langs

# GNU locales
force_gnu_locales := no
locale_no_systems :=
ifneq (, $(filter $(DEB_TARGET_GNU_SYSTEM),$(locale_no_systems)))
  force_gnu_locales := disabled for $(DEB_TARGET_GNU_SYSTEM)
endif

gcc_tarpath		:= $(firstword $(wildcard gcc-*.tar.* /usr/src/gcc-4.3/gcc-*.tar.*))
gcc_tarball		:= $(notdir $(gcc_tarpath))
#gcc_srcdir		:= $(shell echo $(gcc_tarball) | sed 's/\.tar.*//;s/-dfsg//')
gcc_srcdir		:= $(subst -dfsg,,$(patsubst %.tar.lzma,%,$(patsubst %.tar.gz,%,$(gcc_tarball:.tar.bz2=))))

unpack_stamp		:= $(stampdir)/01-unpack-stamp
pre_patch_stamp		:= $(stampdir)/02-pre-patch-stamp
patch_stamp		:= $(stampdir)/02-patch-stamp
src_spu_stamp		:= $(stampdir)/02-src-spu-stamp
control_stamp		:= $(stampdir)/03-control-stamp
configure_stamp		:= $(stampdir)/04-configure-stamp
build_stamp		:= $(stampdir)/05-build-stamp
build_html_stamp	:= $(stampdir)/05-build-html-stamp
build_locale_stamp	:= $(stampdir)/05-build-locale-stamp
build_doxygen_stamp	:= $(stampdir)/05-build-doxygen-stamp
build_javadoc_stamp	:= $(stampdir)/05-build-javadoc-stamp
check_stamp		:= $(stampdir)/06-check-stamp
check_inst_stamp	:= $(stampdir)/06-check-inst-stamp
install_stamp		:= $(stampdir)/07-install-stamp
install_snap_stamp	:= $(stampdir)/07-install-snap-stamp
binary_stamp		:= $(stampdir)/08-binary-stamp

configure_dummy_stamp	:= $(stampdir)/04-configure-dummy-stamp
build_dummy_stamp	:= $(stampdir)/05-build-dummy-stamp
install_dummy_stamp	:= $(stampdir)/07-install-dummy-stamp

ifeq ($(with_base_only),yes)
  control_dependencies = $(patch_stamp)
  configure_dependencies = $(configure_dummy_stamp)
  build_dependencies = $(build_dummy_stamp)
  install_dependencies = $(install_dummy_stamp)
else
  control_dependencies = $(patch_stamp)
  configure_dependencies = $(configure_stamp)
  build_dependencies = $(build_stamp)
  ifeq ($(with_check),yes)
    build_dependencies += check
  endif
  install_dependencies = $(install_stamp)
endif

stamp-dir:
	mkdir -p $(stampdir)
