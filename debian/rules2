#! /usr/bin/make -f
# -*- makefile -*-

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

.SUFFIXES:

include debian/rules.defs
include debian/rules.parameters

# some tools
SHELL	= /bin/bash -e		# brace expansion in rules file
IR	= install -m 644	# Install regular file
IP	= install -m 755	# Install program
IS	= install -m 755	# Install script

#
# Fails to configure cross-compiler with jobs > 1
#
USE_NJOBS=no

#number of jobs to run for build
ifeq ($(USE_NJOBS),no)
  NJOBS :=
  USE_CPUS := 1
else
  ifeq ($(with_java),yes)
    MEM_PER_CPU = 192
  else
    MEM_PER_CPU = 128
  endif
  NUM_CPUS := $(shell if echo $(USE_NJOBS) | grep -q -E '^[0-9]+$$'; \
			then echo $(USE_NJOBS); \
			else getconf _NPROCESSORS_ONLN 2>/dev/null || echo 1; fi)
  USE_CPUS := $(shell mt=`awk '/^MemTotal/ { print $$2 }' /proc/meminfo`; \
			awk -vn=$(NUM_CPUS) -vmt=$$mt -vm=$(MEM_PER_CPU) \
				'END { mt/=1024; n2 = int(mt/m); print n==1 ? 1 : n2<n+1 ? n2 : n+1}' < /dev/null)
  ifneq (,$(strip $(USE_CPUS)))
    NJOBS := -j $(USE_CPUS)
  endif
endif

# Support parallel=<n> in DEB_BUILD_OPTIONS (see #209008)
ifneq (,$(filter parallel=%,$(subst $(COMMA), ,$(DEB_BUILD_OPTIONS))))
  NJOBS := -j $(subst parallel=,,$(filter parallel=%,$(subst $(COMMA), ,$(DEB_BUILD_OPTIONS))))
endif

# kernel-specific ulimit hack
ifeq ($(findstring linux,$(DEB_HOST_GNU_SYSTEM)),linux)
  ULIMIT_M =  if [ -e /proc/meminfo ]; then \
	    m=`awk '/^((Mem|Swap)Free|Cached)/{m+=$$2}END{print int(m*.9)}' \
		/proc/meminfo`; \
	  else \
	    m=`vmstat --free --swap-free --kilobytes|awk '{m+=$$2}END{print int(m*.9)}'`; \
	  fi; \
	  ulimit -m $$m; \
	  echo "Limited memory for test runs to `ulimit -m`kB"
else
  ULIMIT_M = true
endif

ifeq ($(locale_data),generate)
  SET_LOCPATH = LOCPATH=$(PWD)/locales
endif

# the recipient for the test summaries. Send with: debian/rules mail-summary
S_EMAIL = gcc@packages.debian.org gcc-testresults@gcc.gnu.org

# build not yet prepared to take variables from the environment
define unsetenv
  unexport $(1)
  $(1) =
endef
$(foreach v, CPPFLAGS CFLAGS CXXFLAGS FFLAGS LDFLAGS, $(if $(filter environment,$(origin $(v))),$(eval $(call unsetenv, $(v)))))

CC	= $(if $(filter yes,$(with_ada)),gnatgcc,gcc)

STAGE1_CFLAGS = -g -O

ifeq ($(with_d),yes)
  CFLAGS  += -std=gnu99
  LDFLAGS += -lm
endif

ifeq ($(with_ssp_default),yes)
  # FIXME: only use -fno-stack-protector when known to the stage1 compiler
  STAGE1_CFLAGS	= -g -O -fno-stack-protector
  BOOT_CFLAGS	= -g -O2 -fno-stack-protector
  LIBCFLAGS	= -g -O2 -fno-stack-protector
  LIBCXXFLAGS	= -g -O2 -fno-stack-protector -fno-implicit-templates
endif

ifeq ($(DEB_CROSS),yes)
  CFLAGS	= -g -O2
endif

CFLAGS_TO_PASS = \
	$(if $(CFLAGS),CFLAGS="$(CFLAGS)") \
	$(if $(BOOT_CFLAGS),BOOT_CFLAGS="$(BOOT_CFLAGS)") \
	$(if $(LIBCFLAGS),LIBCFLAGS="$(LIBCFLAGS)") \
	$(if $(LIBCXXFLAGS),LIBCXXFLAGS="$(LIBCXXFLAGS)")
LDFLAGS_TO_PASS = \
	$(if $(LDFLAGS),LDFLAGS="$(LDFLAGS)")
STAGE1_CFLAGS_TO_PASS = \
	$(if $(STAGE1_CFLAGS),STAGE1_CFLAGS="$(STAGE1_CFLAGS)")

docdir		= usr/share/doc

# PF is the installation prefix for the package without the leading slash.
# It's "usr" for gcc releases
ifeq ($(PKGSOURCE),gcc-snapshot)
  PF		= usr/lib/gcc-snapshot
else
  PF		= usr
endif

ifeq ($(with_multiarch_lib),yes)
  libdir	= lib/$(DEB_TARGET_GNU_TYPE)
else
  libdir	= lib
endif
# /usr/libexec doesn't follow the FHS
ifeq ($(PKGSOURCE),gcc-snapshot)
  libexecdir	= $(PF)/libexec
else
  libexecdir	= $(PF)/$(libdir)
endif
buildlibdir	= $(builddir)/$(TARGET_ALIAS)

ifeq ($(with_common_gcclibdir),yes)
  gcc_lib_dir	= $(PF)/$(libdir)/gcc/$(TARGET_ALIAS)/$(BASE_VERSION)
  gcc_lexec_dir	= $(libexecdir)/gcc/$(TARGET_ALIAS)/$(BASE_VERSION)
else
  gcc_lib_dir	= $(PF)/$(libdir)/gcc/$(TARGET_ALIAS)/$(GCC_VERSION)
  gcc_lexec_dir	= $(libexecdir)/gcc/$(TARGET_ALIAS)/$(GCC_VERSION)
endif

checkdir = $(builddir)

ifneq ($(DEB_CROSS),yes)
  cxx_inc_dir	= $(PF)/include/c++/$(BASE_VERSION)
else
  cxx_inc_dir	= $(PF)/$(TARGET_ALIAS)/include/c++/$(GCC_VERSION)
endif

CONFARGS = -v \
	--with-pkgversion='$(distribution)___$(DEB_VERSION)' \
	--with-bugurl='file:///usr/share/doc/$(PKGSOURCE)/README.Bugs'

CONFARGS += \
	--enable-languages=$(subst $(SPACE),$(COMMA),$(enabled_languages)) \
	--prefix=/$(PF) \
	--with-system-zlib \

ifeq ($(DEB_CROSS_BOOTSTRAP),yes)
  CONFARGS += \
    --disable-shared \
    --disable-threads
else
  CONFARGS += --enable-shared
endif

CONFARGS += \
	--libexecdir=/$(libexecdir) \
	--without-included-gettext

ifneq ($(DEB_CROSS_BOOTSTRAP),yes)
    CONFARGS += --enable-threads-posix
endif

CONFARGS += $(if $(filter yes,$(with_nls)),--enable-nls,--disable-nls)

CONFARGS += --with-gxx-include-dir=/$(cxx_inc_dir)
CONFARGS += --program-suffix=-$(BASE_VERSION)

ifneq ($(with_sysroot),)
  CONFARGS += --with-sysroot=$(with_sysroot)
endif

ifneq ($(with_bootstrap),)
  CONFARGS += --enable-bootstrap=$(with_bootstrap)
endif

ifeq ($(force_gnu_locales),yes)
  CONFARGS += --enable-clocale=gnu
endif

ifeq ($(with_cxx)-$(with_debug),yes-yes)
  CONFARGS += --enable-libstdcxx-debug
endif

CONFARGS += --disable-libmudflap
CONFARGS += --disable-libssp
CONFARGS += --disable-multilib

ifneq (,$(findstring softfloat,$(DEB_TARGET_GNU_CPU)))
  CONFARGS += --with-float=soft
endif

ifneq (,$(findstring arm-vfp,$(DEB_TARGET_GNU_CPU)))
  CONFARGS += --with-fpu=vfp
endif

ifneq (,$(findstring arm-linux-gnueabi,$(DEB_TARGET_GNU_TYPE)))
  CONFARGS += --disable-sjlj-exceptions
endif

ifeq ($(DEB_TARGET_GNU_CPU),$(findstring $(DEB_TARGET_GNU_CPU),m68k))
  CONFARGS += --disable-werror
endif

ifeq ($(findstring sparc-linux,$(DEB_TARGET_GNU_TYPE)),sparc-linux)
  ifeq ($(biarch64),yes)
    ifeq ($(PKGSOURCE),gcc-snapshot)
      CONFARGS += --enable-targets=all
    endif
    CONFARGS += --with-cpu=v8
  endif
endif

ifeq ($(findstring sh4-linux,$(DEB_TARGET_GNU_TYPE)),sh4-linux)
  CONFARGS += --with-multilib-list=m4,m4-nofpu --with-cpu=sh4
endif

# lpia
ifeq ($(DEB_TARGET_ARCH),lpia)
  CONFARGS += --with-arch=i686 --with-tune=i586
endif

ifeq ($(distribution),Debian)
  ifneq (,$(filter $(DEB_TARGET_ARCH), amd64 i386))
    CONFARGS += --enable-cld
  endif
endif

ifeq ($(DEB_TARGET_ARCH_OS),linux)
  ifneq (,$(findstring $(DEB_TARGET_ARCH), alpha powerpc ppc64 s390 s390x sparc sparc64))
    ifeq ($(DEB_TARGET_ARCH),alpha)
      glibc_version := $(shell dpkg -s libc6.1 | awk '/^Version:/ {print $$2}')
    else
      glibc_version := $(shell dpkg -s libc6 | awk '/^Version:/ {print $$2}')
    endif
    with_ldbl128 := $(shell dpkg --compare-versions $(glibc_version) gt 2.3.99 && echo yes)
    ifeq ($(with_ldbl128),yes)
      CONFARGS += --with-long-double-128
    endif
  endif
endif

ifeq ($(findstring ia64-linux,$(DEB_TARGET_GNU_TYPE)),ia64-linux)
  CONFARGS += --with-system-libunwind
endif

ifeq ($(findstring i486,$(DEB_TARGET_GNU_TYPE)),i486)
  # conflicts with biarch builds, see cpu-default-i486 patch
  #CONFARGS += --with-arch=i486
endif

ifeq ($(PKGSOURCE),gcc-snapshot)
  ifeq ($(findstring --disable-werror, $(CONFARGS)),)
    CONFARGS += --disable-werror
  endif
else
  CONFARGS += --enable-checking=release
endif

ifneq ($(DEB_CROSS),yes)
  CONFARGS += \
	--build=$(DEB_BUILD_GNU_TYPE) \
	--host=$(DEB_BUILD_GNU_TYPE) \
	--target=$(TARGET_ALIAS)
else
  CONFARGS += \
	--program-prefix=$(TARGET_ALIAS)- \
	--includedir=/$(PF)/$(DEB_TARGET_GNU_TYPE)/include \
	--build=$(DEB_BUILD_GNU_TYPE) \
	--host=$(DEB_BUILD_GNU_TYPE) \
	--target=$(TARGET_ALIAS)
endif

ifeq ($(with_bootstrap),)
  # no profiledbootstrap on the following architectures
  # - m68k: we're happy that it builds at all
  # - ia64: doesn't work, see PR16108
  # - hppa: when using gcc-3.3.4 as stage1 compiler, nearly all of the
  #   tests in the libstdc++-v3 testsuite fail
  no_profiled_bs_archs := hppa ia64 m68k
  ifneq (,$(findstring $(DEB_TARGET_GNU_CPU),$(no_profiled_bs_archs)))
    bootstrap_target = bootstrap-lean
  else
    bootstrap_target = profiledbootstrap
  endif
endif
bootstrap_target = bootstrap-lean

# Increase the timeout for one testrun on slow architectures
ifeq ($(DEB_TARGET_GNU_CPU), $(findstring $(DEB_TARGET_GNU_CPU),arm armel hppa m68k sparc))
  DEJAGNU_TIMEOUT=600
else
  DEJAGNU_TIMEOUT=450
endif
ifeq ($(DEB_TARGET_GNU_SYSTEM),gnu)
  DEJAGNU_TIMEOUT=900
endif

default: build

configure: $(configure_dependencies)

$(configure_dummy_stamp):
	touch $(configure_dummy_stamp)

$(configure_stamp):
	dh_testdir
	: # give information about the build process
	@echo "------------------------ Build process variables ------------------------"
	@echo "Number of parallel processes used for the build: $(USE_CPUS)"
	@echo "Package source: $(PKGSOURCE)"
	@echo "GCC version: $(GCC_VERSION)"
	@echo "Base Debian version: $(BASE_VERSION)"
	@echo -e "Configured with: $(subst ___, ,$(foreach i,$(CONFARGS),$(i)\n\t))"
ifeq ($(DEB_CROSS),yes)
	@echo "Building cross compiler for $(DEB_TARGET_ARCH)"
endif
	@echo "Using shell $(SHELL)"
	@echo "Architecture: $(DEB_TARGET_ARCH) (GNU: $(TARGET_ALIAS))"
	@echo "CPPFLAGS: $(CPPFLAGS)"
	@echo "CFLAGS: $(CFLAGS)"
	@echo "LDFLAGS: $(LDFLAGS)"
	@echo "BOOT_CFLAGS: $(BOOT_CFLAGS)"
	@echo "DEBIAN_BUILDARCH: $(DEBIAN_BUILDARCH)"
	@echo "Install prefix: /$(PF)"
	@echo "Will not build the biarch compilers"

ifeq ($(with_cxx),yes)
	@echo "Will build the C++ compiler"
else
	@echo "Will not build the C++ compiler: $(with_cxx)"
endif
	@echo "Will not build the ObjC compiler: $(with_objc)"
	@echo "Will not build the Obj-C++ compiler: $(with_objcxx)"
	@echo "Will not build the Fortran 95 compiler: $(with_fortran)"
	@echo "Will not build the Java compiler: $(with_java)"
	@echo "Will not build the Pascal compiler: $(with_pascal)"
	@echo "Will not build the Ada compiler: $(with_ada)"
	@echo "Will not build the D compiler: $(with_d)"
	@echo "Will build without SSP support: $(with_ssp)"
	@echo "Will not run the testsuite: $(with_check)"
ifeq ($(with_nls),yes)
	@echo "Will enable national language support."
else
	@echo "Will disable national language support: $(with_nls)"
endif
	@echo "-----------------------------------------------------------------------------"
	@echo ""
	rm -f $(configure_stamp) $(build_stamp)

	rm -rf $(builddir)
	mkdir $(builddir)

	: # configure
	cd $(builddir) \
	  && PATH=$(PWD)/bin:$$PATH \
		CC="$(CC)" \
		$(SET_SHELL) \
	LD_LIBRARY_PATH=$${LD_LIBRARY_PATH:+$$LD_LIBRARY_PATH:}$(builddir)/gcc/ada/rts \
		../src/configure $(subst ___, ,$(CONFARGS))

	mkdir -p $(builddir)/gcc
	( \
	  echo '#define __$(subst -,_,$(DEB_TARGET_GNU_TYPE))__'; \
	  echo ''; \
	  echo '  { "",  "$(DEB_TARGET_GNU_TYPE)"},'; \
	  cat debian/multiarch.inc; \
	) > $(builddir)/gcc/multiarch.inc
	cp -p $(builddir)/gcc/multiarch.inc $(srcdir)/gcc/

	touch $(configure_stamp)

build: $(build_dependencies)

$(build_dummy_stamp):
	touch $(build_dummy_stamp)

$(build_locale_stamp):
ifeq ($(locale_data),generate)
	: # build locales needed by libstdc++ testsuite
	rm -rf locales
	mkdir locales
	- sh debian/locale-gen
endif
	touch $(build_locale_stamp)

ifeq ($(DEB_CROSS_BOOTSTRAP),yes)
  CROSS_BUILD_TARGETS := all-gcc all-target-libgcc
else
  CROSS_BUILD_TARGETS := all
endif

$(build_stamp): $(configure_stamp) $(build_locale_stamp)
	dh_testdir
	rm -f bootstrap-protocol
# DEB_CROSS is never set if REVERSE_CROSS is set and vice-versa.
# DEB_CROSS build
ifeq ($(DEB_CROSS),yes)
	: # build bootstrap or cross compiler for $(TARGET_ALIAS)
	( \
	  set +e; \
	  PATH=$(PWD)/bin:$$PATH \
	  $(SET_LOCPATH) \
	    $(MAKE) -C $(builddir) $(NJOBS) \
		CC="$(CC)" \
		$(CFLAGS_TO_PASS) \
		$(LDFLAGS_TO_PASS) \
		$(CROSS_BUILD_TARGETS); \
	  echo $$? > status; \
	) 2>&1 | tee bootstrap-protocol
	s=`cat status`; rm -f status; test $$s -eq 0
else
  # REVERSE_CROSS build
  ifeq ($(REVERSE_CROSS),yes)
;	: # build cross compiler for $(TARGET_ALIAS)
	( \
	  set +e; \
	  PATH=$(PWD)/bin:$$PATH \
	  $(SET_LOCPATH) \
	    $(MAKE) -C $(builddir) $(NJOBS) \
		CC="$(CC)" \
		$(CFLAGS_TO_PASS) \
		$(LDFLAGS_TO_PASS) \
		; \
	  echo $$? > status; \
	) 2>&1 | tee bootstrap-protocol
	s=`cat status`; rm -f status; test $$s -eq 0
else
  # Native build
  ifeq ($(with_java),yes)
	mkdir -p bin
	ln -sf /usr/bin/fastjar bin/jar
    ifeq ($(with_native_ecj),yes)
	: # prepare the standalone ecj jar
	cp /usr/share/java/ecj.jar $(srcdir)/ecj-standalone.jar
	zip -d $(srcdir)/ecj-standalone.jar 'org/eclipse/jdt/core/JDTCompilerAdapter*'
    endif
	( \
	  echo '#!/bin/sh'; \
	  echo 'exec gij-4.2 -cp /usr/share/java/ecj.jar org.eclipse.jdt.internal.compiler.batch.GCCMain "$$@"'; \
	) > bin/ecj1
	chmod +x bin/ecj1
    ifeq ($(with_java_maintainer_mode),yes)
	: # If we don't have gjavah in PATH, try to build it with the old gij
	mkdir -p bin
	if [ -x /usr/bin/gjavah-4.2 ]; then \
	  ln -sf /usr/bin/gjavah-4.2 bin/gjavah; \
	elif [ -x bin/gjavah ]; then \
	  : ; \
	else \
	  mkdir -p $(builddir)/java_hacks; \
	  cd $(builddir)/java_hacks; \
	  cp -a $(srcdir)/libjava/classpath/tools/external external; \
	  mkdir -p gnu/classpath/tools; \
	  cp -a $(srcdir)/libjava/classpath/tools/gnu/classpath/tools/{common,javah,getopt} \
	    gnu/classpath/tools/; \
	  cp -a $(srcdir)/libjava/classpath/resource/gnu/classpath/tools/common/Messages.properties \
	    gnu/classpath/tools/common; \
	  cd external/asm; \
	  for i in `find . -name \*.java`; do gcj-4.2 --encoding ISO-8859-1 -C $$i -I.; done; \
	  cd ../..; \
	  for i in `find gnu -name \*.java`; do gcj-4.2 -C $$i -I. -Iexternal/asm/; done; \
	  gcj-4.2 -findirect-dispatch -O2 -fmain=gnu.classpath.tools.javah.Main \
	    -I. -Iexternal/asm/ `find . -name \*.class` -o $(PWD)/bin/gjavah.real; \
	  ( \
	    echo '#!/bin/sh'; \
	    echo 'export CLASSPATH='`pwd`'$${CLASSPATH:+:$$CLASSPATH}'; \
	    echo 'exec $(PWD)/bin/gjavah.real "$$@"'; \
	  ) > $(PWD)/bin/gjavah; \
	  chmod +x $(PWD)/bin/gjavah; \
	fi
    endif
  endif
	: # build native compiler
	( \
	  set +e; \
	  PATH=$(PWD)/bin:$$PATH \
	  $(SET_SHELL) \
	  $(SET_LOCPATH) \
	    $(MAKE) -C $(builddir) $(NJOBS) $(bootstrap_target) \
		CC="$(CC)" \
		$(CFLAGS_TO_PASS) \
		$(STAGE1_CFLAGS_TO_PASS) \
		$(LDFLAGS_TO_PASS) \
		; \
	  echo $$? > status; \
	) 2>&1 | tee bootstrap-protocol
	s=`cat status`; rm -f status; test $$s -eq 0
endif
endif
	-chmod 755 $(srcdir)/contrib/warn_summary
	if [ -x $(srcdir)/contrib/warn_summary ]; then \
	  rm -f bootstrap-summary; \
	  $(srcdir)/contrib/warn_summary bootstrap-protocol \
	    > bootstrap-summary; \
	fi

	touch $(build_stamp)

clean: debian/control
	dh_testdir
	rm -f pxxx status
	rm -f *-summary *-protocol testsuite-comparision summary-diff
	if [ -f $(srcdir)/gcc/p/config-lang.in.debian ]; then \
	  mv -f $(srcdir)/gcc/p/config-lang.in.debian $(srcdir)/gcc/p/config-lang.in; \
	else true; fi
	rm -f $(srcdir)/gcc/po/*.gmo
	rm -f debian/lib{gcc,gcj,objc,stdc++}{-v3,[0-9]}*.{{pre,post}{inst,rm},shlibs}
	fs=`echo debian/*-BV* debian/*GCJ* debian/*CXX* debian/*LC* debian/*MF* | sort -u`; \
	for f in $$fs; do \
	  [ -f $$f ] || continue; \
	  f2=$$(echo $$f \
		| sed 's/BV/$(BASE_VERSION)/;s/PV/$(GPC_BASE_VERSION)/;s/CXX/$(CXX_SONAME)/;s/LGCJ/$(PKG_LIBGCJ_EXT)/;s/GCJ/$(PKG_GCJ_EXT)/;s/LC/$(GCC_SONAME)/;s/MF/$(MUDFLAP_SONAME)/'); \
	  rm -f $$f2; \
	done
	rm -f debian/shlibs.local debian/substvars.local
	rm -f debian/*.debhelper
	-[ -d debian/bugs ] && $(MAKE) -C debian/bugs clean
	rm -f debian/lib*gcj-bc.shlibs
	rm -rf bin locales
	rm -rf check-inst
	dh_clean

# -----------------------------------------------------------------------------
# some abbrevations for the package names and directories;
# p_XXX is the package name, d_XXX is the package directory
# these macros are only used in the binary-* targets.

ifeq ($(versioned_packages),yes)
  pkg_ver := -$(BASE_VERSION)
endif

ifneq ($(DEB_CROSS),yes)
  p_base = gcc$(pkg_ver)-base
  p_gcc  = gcc$(pkg_ver)
  p_cpp  = cpp$(pkg_ver)
  p_cppd = cpp$(pkg_ver)-doc
  p_cxx  = g++$(pkg_ver)
  p_doc  = gcc$(pkg_ver)-doc
  p_lgcc = libgcc$(GCC_SONAME)
else
  # only triggered if DEB_CROSS set
  p_base = gcc$(pkg_ver)$(cross_bin_arch)-base
  p_cpp  = cpp$(pkg_ver)$(cross_bin_arch)
  p_gcc  = gcc$(pkg_ver)$(cross_bin_arch)
  p_cxx  = g++$(pkg_ver)$(cross_bin_arch)
endif

d	= debian/tmp
d_base	= debian/$(p_base)
d_gcc	= debian/$(p_gcc)
d_cpp	= debian/$(p_cpp)
d_cppd	= debian/$(p_cppd)
d_cxx	= debian/$(p_cxx)
d_doc	= debian/$(p_doc)
d_lgcc	= debian/$(p_lgcc)

common_substvars = \
	$(shell awk "{printf \"'-V%s' \", \$$0}" debian/substvars.local)

# ---------------------------------------------------------------------------

ifeq ($(with_gccxbase),yes)
  include debian/rules.d/binary-base.mk
endif

ifeq ($(with_libgcc),yes)
#  include debian/rules.d/binary-libgcc-cross.mk
  include debian/rules.d/binary-libgcc.mk
endif

ifeq ($(with_cdev),yes)
  include debian/rules.d/binary-cpp-cross.mk
endif

ifeq ($(with_cxxdev),yes)
  include debian/rules.d/binary-cxx-cross.mk
endif
ifeq ($(with_cxx),yes)
#  include debian/rules.d/binary-libstdcxx-cross.mk
  include debian/rules.d/binary-libstdcxx.mk
endif

ifeq ($(with_cdev),yes)
  include debian/rules.d/binary-gcc-cross.mk
endif

# ----------------------------------------------------------------------

ifeq ($(DEB_CROSS_BOOTSTRAP),yes)
  INSTALL_EVERYTHING_TARGETS := install-gcc install-target-libgcc
else
  INSTALL_EVERYTHING_TARGETS := install
endif

install: $(install_dependencies)

$(install_dummy_stamp): $(build_dummy_stamp)
	touch $(install_dummy_stamp)

$(install_stamp): $(build_stamp)
	dh_testdir
	dh_testroot
	dh_clean -k

	: # Install directories
	rm -rf $(d)
	mkdir -p $(d)/$(libdir) $(d)/$(PF) $(d)/$(PF)/lib/debug

	: # Install everything
	PATH=$(PWD)/bin:$$PATH \
	$(SET_SHELL) \
	  $(MAKE) -C $(builddir) \
	    $(CFLAGS_TO_PASS) \
	    $(LDFLAGS_TO_PASS) \
	    DESTDIR=$(PWD)/$(d) \
	    infodir=/$(PF)/share/info \
	    mandir=/$(PF)/share/man \
		$(INSTALL_EVERYTHING_TARGETS)

ifeq ($(with_common_gcclibdir),yes)
	mv $(d)/$(subst /$(BASE_VERSION),/$(GCC_VERSION),$(gcc_lib_dir)) \
		$(d)/$(gcc_lib_dir)
  ifneq ($(gcc_lib_dir),$(gcc_lexec_dir))
	mv $(d)/$(subst /$(BASE_VERSION),/$(GCC_VERSION),$(gcc_lexec_dir)) \
		$(d)/$(gcc_lexec_dir)
  endif
endif

	: # remove rpath settings from binaries and shared libs
	for i in $$(chrpath -k $(d)/$(PF)/bin/* $(d)/$(PF)/lib*/lib*.so.* \
			$(d)/$(PF)/lib*/gcj$(pkg_ver)*/lib*.so.* \
			2>/dev/null | awk -F: '/RPATH=/ {print $$1}'); \
	do \
	  case "$$i" in ecj1|*gij-*|*libjawt*|*libjvm*) continue; esac; \
	  [ -h $$i ] && continue; \
	  chrpath --delete $$i; \
	  echo "removed RPATH: $$i"; \
	done

	: # fix '*.la' and '*.lai' files
	for i in $$(find $(d) -name '*.la' -o -name '*.lai'); do \
	  libdir=$$(sed -n "s,^libdir='\(.*\)'.*,\1,p" $$i); \
	  [ -z "$$libdir" ] && continue; \
	  libdir=$$(realpath -s $$libdir); \
	  sed -e "s,^libdir='\(.*\)'.*,libdir='$$libdir'," \
	    -e 's, -L$(builddir)[^ ]*,,g' \
	    $$i > $$i.new; \
	  if diff -u $$i $$i.new; then \
	    rm -f $$i.new; \
	  else \
	    echo "$$i: path normalized"; \
	    touch -r $$i $$i.new; \
	    mv -f $$i.new $$i; \
	  fi; \
	done

	chmod 755 debian/dh_*

	touch $(install_stamp)

#binary-arch: build install $(foreach i,$(arch_binaries),$(binary_stamp)-$(i))
binary-arch: $(foreach i,$(arch_binaries),$(binary_stamp)-$(i))
ifeq ($(with_check),yes)
	@echo Done
endif

#binary-indep: build install $(foreach i,$(indep_binaries),$(binary_stamp)-$(i))
binary-indep: $(foreach i,$(indep_binaries),$(binary_stamp)-$(i))

binary: binary-indep binary-arch
.PHONY: build clean binary-indep binary-arch binary
