#! /bin/sh -e

# gdc-fix-build.dpatch by Arthur Loiret <arthur.loiret@gmail.com>
# DP: Fix libphobos build on non-biarched 64 bit systems.
# DP: Updated for gdc-4.3 by Iain Buclaw <ibuclaw@ubuntu.com>

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        #cd ${dir}gcc && autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0


--- gcc/config/rs6000/rs6000.h	2008-01-26 17:18:35.000000000 +0000
+++ gcc/config/rs6000/rs6000.h	2010-03-02 12:32:20.283108290 +0000
@@ -412,10 +412,6 @@
   targetm.resolve_overloaded_builtin = altivec_resolve_overloaded_builtin; \
 } while (0)
 
-/* Target #defines.  */
-#define TARGET_CPU_CPP_BUILTINS() \
-  rs6000_cpu_cpp_builtins (pfile)
-
 /* This is used by rs6000_cpu_cpp_builtins to indicate the byte order
    we're compiling for.  Some configurations may need to override it.  */
 #define RS6000_CPU_CPP_ENDIAN_BUILTINS()	\
@@ -435,6 +431,76 @@
 	}					\
     }						\
   while (0)
+
+/* Target #defines.  */
+#define TARGET_CPU_CPP_BUILTINS() do {                         \
+  if (TARGET_POWER2)                                           \
+      builtin_define ("_ARCH_PWR2");                           \
+  else if (TARGET_POWER)                                       \
+      builtin_define ("_ARCH_PWR");                            \
+  if (TARGET_POWERPC)                                          \
+      builtin_define ("_ARCH_PPC");                            \
+  if (TARGET_PPC_GPOPT)                                                \
+      builtin_define ("_ARCH_PPCSQ");                          \
+  if (TARGET_PPC_GFXOPT)                                       \
+      builtin_define ("_ARCH_PPCGR");                          \
+  if (TARGET_POWERPC64)                                                \
+      builtin_define ("_ARCH_PPC64");                          \
+  if (TARGET_MFCRF)                                            \
+      builtin_define ("_ARCH_PWR4");                           \
+  if (TARGET_POPCNTB)                                          \
+      builtin_define ("_ARCH_PWR5");                           \
+  if (TARGET_FPRND)                                            \
+      builtin_define ("_ARCH_PWR5X");                          \
+  if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)   \
+      builtin_define ("_ARCH_COM");                            \
+  if (TARGET_ALTIVEC)                                          \
+      {                                                                \
+	builtin_define ("__ALTIVEC__");                                \
+	builtin_define ("__VEC__=10206");                      \
+                                                               \
+	/* Define the AltiVec syntactic elements.  */          \
+	builtin_define ("__vector=__attribute__((altivec(vector__)))");                        \
+	builtin_define ("__pixel=__attribute__((altivec(pixel__))) unsigned short");   \
+	builtin_define ("__bool=__attribute__((altivec(bool__))) unsigned");           \
+      }                                                                \
+      if (TARGET_SPE)                                          \
+	builtin_define ("__SPE__");                            \
+      if (TARGET_SOFT_FLOAT)                                   \
+        builtin_define ("_SOFT_FLOAT");                                \
+      /* Used by lwarx/stwcx. errata work-around.  */          \
+      if (rs6000_cpu == PROCESSOR_PPC405)                      \
+	builtin_define ("__PPC405__");                         \
+      /* Used by libstdc++.  */                                        \
+      if (TARGET_NO_LWSYNC)                                    \
+	builtin_define ("__NO_LWSYNC__");                      \
+      /* May be overridden by target configuration.  */                \
+      RS6000_CPU_CPP_ENDIAN_BUILTINS();                                \
+                                                               \
+      if (TARGET_LONG_DOUBLE_128)                              \
+	  builtin_define ("__LONG_DOUBLE_128__");              \
+                                                               \
+      switch (rs6000_current_abi)                              \
+	{                                                      \
+	  case ABI_V4:                                         \
+	    builtin_define ("_CALL_SYSV");                     \
+	    break;                                             \
+	  case ABI_AIX:                                                \
+	    builtin_define ("_CALL_AIXDESC");                  \
+	    builtin_define ("_CALL_AIX");                      \
+	    break;                                             \
+	  case ABI_DARWIN:                                     \
+	    builtin_define ("_CALL_DARWIN");                   \
+	    break;                                             \
+	  default:                                             \
+	    break;                                             \
+	}                                                     \
+                                                               \
+      /* Let the compiled code know if 'f' class registers will not be available.  */        \
+      if (TARGET_SOFT_FLOAT || !TARGET_FPRS)                  \
+	  builtin_define ("__NO_FPRS__");                      \
+} while(0)
+
 
 /* Target machine storage layout.  */
 
--- gcc/d/d-gcc-includes.h	2010-03-01 17:18:05.000000000 +0000
+++ gcc/d/d-gcc-includes.h	2010-03-02 12:24:20.808081019 +0000
@@ -37,6 +37,23 @@
 #include "config.h"
 #include "system.h"
 
+/* Those are used in TARGET_OS_CPP_BUILTINS in some gcc/config/<arch>/<arch>.c
+   (alpha, mips, arm and a few others) for some builtin_defines such
+   __LANGUAGE_C_PLUS_PLUS but are defined in c-common.h. */
+#ifndef c_dialect_cxx
+#  define c_dialect_cxx()      0
+#endif
+#ifndef c_dialect_objc
+#  define c_dialect_objc()     0
+#endif
+
+/* Even if they are defined in d-apple-gcc.c and d-c-stubs.c, they are also
+   used in config/mips (as in config/darwin), so as we don't /need/ them,
+   better to define an empty macro here. */
+#ifndef builtin_define_with_value
+#  define builtin_define_with_value(macro, expansion, is_str)
+#endif
+
 /* Before gcc 4.0, <stdbool.h> was included before defining bool.  In 4.0,
    it is always defined as "unsigned char" unless __cplusplus.  Have to make
    sure the "bool" under c++ is the same so that structs are laid out
